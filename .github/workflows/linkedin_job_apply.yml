name: LinkedIn Auto Job Applier

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  # Allows manual triggering
  workflow_dispatch:

jobs:
  apply-to-jobs:
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTIONS: "true"
      CI: "true"
      
    steps:
      # ...existing code...

      - name: Debug Environment Variables
        run: |
          echo "Checking environment variables (secrets redacted):"
          echo "LN_USERNAME set: ${{ secrets.LN_USERNAME != '' }}"
          echo "LN_PASSWORD set: ${{ secrets.LN_PASSWORD != '' }}"
          echo "GEMINI_API_KEY set: ${{ secrets.GEMINI_API_KEY != '' }}"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "CI: $CI"
          echo "PYTHONPATH: $PYTHONPATH"

      - name: Update credentials
        env:
          LN_USERNAME: ${{ secrets.LN_USERNAME }}
          LN_PASSWORD: ${{ secrets.LN_PASSWORD }}
        run: |
          echo "Updating secrets.py with credentials..."
          python -c "
          import os
          
          # Read current content
          with open('config/secrets.py', 'r') as f:
              content = f.read()
          
          # Update the content with environment variables
          username = os.environ.get('LN_USERNAME')
          password = os.environ.get('LN_PASSWORD')
          print(f'Username available: {bool(username)}')
          print(f'Password available: {bool(password)}')
          
          # Write back the updated content
          with open('config/secrets.py', 'w') as f:
              if 'username = ' in content:
                  content = content.replace(
                      'username = os.environ.get(\"LN_USERNAME\", \"\")',
                      f'username = os.environ.get(\"LN_USERNAME\", \"{username}\")'
                  )
              else:
                  content += f'\nusername = os.environ.get(\"LN_USERNAME\", \"{username}\")'
              
              if 'password = ' in content:
                  content = content.replace(
                      'password = os.environ.get(\"LN_PASSWORD\", \"\")',
                      f'password = os.environ.get(\"LN_PASSWORD\", \"{password}\")'
                  )
              else:
                  content += f'\npassword = os.environ.get(\"LN_PASSWORD\", \"{password}\")'
              
              f.write(content)
          "

      - name: Run LinkedIn Auto Job Applier
        env:
          DISPLAY: ":99.0"
          PYTHONPATH: "${PYTHONPATH}:/home/runner/work/LinkedJobApply/LinkedJobApply"
          DOWNLOADS_PATH: "/home/runner/Downloads"
          LN_USERNAME: ${{ secrets.LN_USERNAME }}
          LN_PASSWORD: ${{ secrets.LN_PASSWORD }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Print environment info (without exposing secrets)
          echo "Environment configuration:"
          echo "Python path: $PYTHONPATH"
          echo "Downloads path: $DOWNLOADS_PATH"
          echo "Display: $DISPLAY"
          echo "LN_USERNAME available: ${{ secrets.LN_USERNAME != '' }}"
          echo "LN_PASSWORD available: ${{ secrets.LN_PASSWORD != '' }}"
          
          # Run with additional debugging
          python -c "
          import os
          print('Python environment check:')
          print(f'LN_USERNAME in env: {\"LN_USERNAME\" in os.environ}')
          print(f'LN_PASSWORD in env: {\"LN_PASSWORD\" in os.environ}')
          "
          
          # Run the bot
          python runAiBot.py

      # ...existing code...