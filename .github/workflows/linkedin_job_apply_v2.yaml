name: LinkedIn Auto Job Applier V2

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  # Allows manual triggering
  workflow_dispatch:

jobs:
  apply-to-jobs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb python3-pip python3-venv curl x11-utils scrot python3-tk python3-dev

      - name: Set up Chrome
        run: |
          # Remove any existing Chrome installations
          sudo apt-get remove -y google-chrome-stable
          sudo rm -rf /etc/apt/sources.list.d/google-chrome*.list /usr/local/bin/chromedriver

          # Install Chrome
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Get Chrome version
          CHROME_VERSION=$(google-chrome --version | grep -oP '(?<=Google Chrome )\d+\.\d+\.\d+\.\d+')
          CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION" | cut -d. -f1)
          echo "Detected Chrome version: $CHROME_VERSION (Major: $CHROME_MAJOR_VERSION)"
          echo "CHROME_VERSION=$CHROME_VERSION" >> $GITHUB_ENV
          echo "CHROME_MAJOR_VERSION=$CHROME_MAJOR_VERSION" >> $GITHUB_ENV

      - name: Set up ChromeDriver
        run: |
          # Try Chrome for Testing first (newer approach)
          echo "Trying Chrome for Testing version..."
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${{ env.CHROME_MAJOR_VERSION }}")
          IS_CHROME_FOR_TESTING=true
          
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "No Chrome for Testing version found, trying legacy ChromeDriver..."
            CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${{ env.CHROME_MAJOR_VERSION }}")
            IS_CHROME_FOR_TESTING=false
          fi
          
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "No exact match found, trying previous Chrome version..."
            PREV_VERSION=$((${{ env.CHROME_MAJOR_VERSION }}-1))
            CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$PREV_VERSION")
            IS_CHROME_FOR_TESTING=false
          fi
          
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "Failed to find compatible ChromeDriver version"
            exit 1
          fi
          
          echo "Installing ChromeDriver version: $CHROMEDRIVER_VERSION"
          echo "CHROMEDRIVER_VERSION=$CHROMEDRIVER_VERSION" >> $GITHUB_ENV
          echo "IS_CHROME_FOR_TESTING=$IS_CHROME_FOR_TESTING" >> $GITHUB_ENV
          
          # Create directories for ChromeDriver with proper permissions
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /home/runner/.local/bin
          sudo chown -R runner:runner /home/runner/.local
          
          # Download and install ChromeDriver
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          if [ "$IS_CHROME_FOR_TESTING" = true ]; then
            echo "Downloading Chrome for Testing ChromeDriver..."
            wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
            unzip -o chromedriver-linux64.zip
            
            # Install in system location
            sudo cp -f chromedriver-linux64/chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            
            # Install in user location with proper ownership
            cp -f chromedriver-linux64/chromedriver /home/runner/.local/bin/
            chmod +x /home/runner/.local/bin/chromedriver
          else
            echo "Downloading legacy ChromeDriver..."
            wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
            unzip -o chromedriver_linux64.zip
            
            # Install in system location
            sudo cp -f chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            
            # Install in user location with proper ownership
            cp -f chromedriver /home/runner/.local/bin/
            chmod +x /home/runner/.local/bin/chromedriver
          fi
          
          # Clean up
          cd -
          rm -rf "$TEMP_DIR"
          
          # Verify installation and permissions
          echo "ChromeDriver system installation:"
          ls -l /usr/local/bin/chromedriver
          echo "ChromeDriver user installation:"
          ls -l /home/runner/.local/bin/chromedriver
          echo "ChromeDriver version:"
          chromedriver --version

      - name: Set up project directories
        run: |
          # Create and set permissions for required directories
          mkdir -p ~/Downloads logs/screenshots "all excels" "all resumes/temp"
          chmod -R 777 ~/Downloads logs "all excels" "all resumes"
          
          # Verify directory setup
          ls -la ~/Downloads logs "all excels" "all resumes"

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt

      - name: Set up virtual display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          echo "DISPLAY=:99.0" >> $GITHUB_ENV

      - name: Configure for headless mode
        run: |
          # Update settings.py for headless mode
          cat << EOF >> config/settings.py
          
          # Headless mode configuration for GitHub Actions
          import os
          running_in_actions = True
          run_in_background = True
          safe_mode = True
          disable_extensions = True
          smooth_scroll = False
          keep_screen_awake = False
          stealth_mode = False
          showAiErrorAlerts = False
          downloads_path = "/home/runner/Downloads"  # Set downloads path for GitHub Actions
          EOF

      - name: Update credentials
        run: |
          python -c "
          import os
          
          # Read current content
          with open('config/secrets.py', 'r') as f:
              content = f.read()
          
          # Update the content
          if 'username = os.environ.get(\"LN_USERNAME\"' not in content:
              with open('config/secrets.py', 'a') as f:
                  f.write('\n# Auto-inserted by GitHub Actions\n')
                  f.write('username = os.environ.get(\"LN_USERNAME\", \"\")\n')
                  f.write('password = os.environ.get(\"LN_PASSWORD\", \"\")\n')
          "

      - name: Verify environment
        run: |
          echo "System information:"
          uname -a
          echo "Directory structure:"
          ls -R
          echo "Chrome version:"
          google-chrome --version
          echo "ChromeDriver version:"
          chromedriver --version
          echo "Python version:"
          python --version
          echo "Display:"
          echo $DISPLAY
          echo "ChromeDriver location:"
          which chromedriver
          echo "Chrome binary location:"
          which google-chrome

      - name: Run LinkedIn Auto Job Applier
        env:
          DISPLAY: ":99.0"
          GITHUB_ACTIONS: "true"
          CI: "true"
          PYTHONPATH: "${PYTHONPATH}:/home/runner/work/LinkedJobApply/LinkedJobApply"
          DOWNLOADS_PATH: "/home/runner/Downloads"
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          LN_USERNAME: ${{ secrets.LN_USERNAME }}
          LN_PASSWORD: ${{ secrets.LN_PASSWORD }}
          CHROME_VERSION: ${{ env.CHROME_VERSION }}
          CHROMEDRIVER_VERSION: ${{ env.CHROMEDRIVER_VERSION }}
          IS_CHROME_FOR_TESTING: ${{ env.IS_CHROME_FOR_TESTING }}
        run: |
          # Print environment info
          echo "Python path: $PYTHONPATH"
          echo "Downloads path: $DOWNLOADS_PATH"
          echo "Chrome version: $CHROME_VERSION"
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          echo "Using Chrome for Testing: $IS_CHROME_FOR_TESTING"
          
          # Run the bot
          python runAiBot.py